package ru.spb.devpractices.masterbest.serverside.services.model;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import ru.spb.devpractices.masterbest.serverside.controllers.IntegrationRestController;import ru.spb.devpractices.masterbest.serverside.dto.IntegrationOrderStatusHistoryDTO;import ru.spb.devpractices.masterbest.serverside.dto.UserOrderStatusDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.OrderNotFoundException;import ru.spb.devpractices.masterbest.serverside.mappers.OrderUserStatusMapper;import ru.spb.devpractices.masterbest.serverside.model.order.Order;import ru.spb.devpractices.masterbest.serverside.model.order.OrderStatus;import ru.spb.devpractices.masterbest.serverside.model.order.OrderUserStatus;import ru.spb.devpractices.masterbest.serverside.repo.IkeaArticlesRepo;import ru.spb.devpractices.masterbest.serverside.repo.OrderItemsRepo;import ru.spb.devpractices.masterbest.serverside.repo.OrderUserStatusRepo;import ru.spb.devpractices.masterbest.serverside.repo.OrdersRepo;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Optional;@Servicepublic class OrdersService {    private final OrdersRepo ordersRepo;    private final OrderUserStatusRepo orderUserStatusRepo;    private final OrderUserStatusMapper orderUserStatusMapper;    private final IntegrationRestController integrationRestController;    public OrdersService(OrdersRepo ordersRepo,                         OrderUserStatusRepo orderUserStatusRepo,                         OrderItemsRepo orderItemsRepo,                         IkeaArticlesRepo articlesRepo,                         OrderUserStatusMapper orderUserStatusMapper,                         IntegrationRestController integrationRestController) {        this.ordersRepo = ordersRepo;        this.orderUserStatusRepo = orderUserStatusRepo;        this.orderUserStatusMapper = orderUserStatusMapper;        this.integrationRestController = integrationRestController;    }    public Order getOrder (String ikea_number) {        return ordersRepo.findById(ikea_number).orElseThrow(OrderNotFoundException::new);    }    public Order saveOrder(Order order) {        return ordersRepo.save(order);    }    public Map<Order, OrderStatus> getAllOrdersByUserId (Long userId, boolean isHistory){        List<Order> allUserOrders = ordersRepo.findAllByUsers_id(userId);        Map<Order, OrderStatus> orders = new HashMap<>();        for (Order order: allUserOrders){            String ikea_number = order.getIkea_number();            OrderUserStatus orderUserStatus = orderUserStatusRepo.findAllByUserAndAndOrder(userId, ikea_number);            if (orderUserStatus.getStatus().isHistoryStatus() == isHistory){                orders.put(order, orderUserStatus.getStatus());            }        }        return orders;    }    public ResponseEntity<?> setOrderStatus (UserOrderStatusDTO dto){        OrderUserStatus orderUserStatus = orderUserStatusMapper.toEntity(dto);        Optional<Order> orderOptional = ordersRepo.findById(dto.getOrderNumber());        if (orderOptional.isPresent()) {                        IntegrationOrderStatusHistoryDTO statusHistoryDTO = new IntegrationOrderStatusHistoryDTO(                    Integer.valueOf(dto.getUserID()),                    OrderStatus.valueOf(dto.getStatus()),                    orderOptional.get().getMb_number(),                    dto.getComment()            );            integrationRestController.setOrderUserStatus(statusHistoryDTO);            orderUserStatusRepo.save(orderUserStatus);            return ResponseEntity.ok().build();        }        else return ResponseEntity.notFound().build();    }}