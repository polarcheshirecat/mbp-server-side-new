package ru.spb.devpractices.masterbest.serverside.services.model;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import ru.spb.devpractices.masterbest.serverside.controllers.IntegrationRestController;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationOrderStatusDTO;import ru.spb.devpractices.masterbest.serverside.dto.front.OrderStatusDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.OrderNotFoundException;import ru.spb.devpractices.masterbest.serverside.mappers.OrderUserStatusMapper;import ru.spb.devpractices.masterbest.serverside.model.order.Order;import ru.spb.devpractices.masterbest.serverside.model.order.OrderStatus;import ru.spb.devpractices.masterbest.serverside.model.order.OrderUserStatus;import ru.spb.devpractices.masterbest.serverside.repo.*;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Optional;@Servicepublic class OrdersService {    private final OrdersRepo ordersRepo;    private final OrderUserStatusRepo orderUserStatusRepo;    private final OrderUserStatusMapper orderUserStatusMapper;    private final IntegrationRestController integrationRestController;    private final OrderTypesRepo orderTypesRepo;    public OrdersService(OrdersRepo ordersRepo,                         OrderUserStatusRepo orderUserStatusRepo,                         OrderItemsRepo orderItemsRepo,                         IkeaArticlesRepo articlesRepo,                         OrderUserStatusMapper orderUserStatusMapper,                         IntegrationRestController integrationRestController,                         OrderTypesRepo orderTypesRepo) {        this.ordersRepo = ordersRepo;        this.orderUserStatusRepo = orderUserStatusRepo;        this.orderUserStatusMapper = orderUserStatusMapper;        this.integrationRestController = integrationRestController;        this.orderTypesRepo = orderTypesRepo;    }    public Order getOrder (String ikea_number) {        return ordersRepo.findById(ikea_number).orElseThrow(OrderNotFoundException::new);    }    public Order saveOrder(Order order) {        return ordersRepo.save(order);    }////    public Map<Order, OrderStatus> getAllOrdersByUserId (Long userId, boolean isHistory){//        List<Order> allUserOrders = ordersRepo.findAllByUsers_id(userId);//        Map<Order, OrderStatus> orders = new HashMap<>();//        for (Order order: allUserOrders){//            String ikea_number = order.getIkea_number();//            OrderUserStatus orderUserStatus = orderUserStatusRepo.findAllByUserAndAndOrder(userId, ikea_number);//            if (orderUserStatus.getStatus().isHistoryStatus() == isHistory){//                orders.put(order, orderUserStatus.getStatus());//            }//        }//        return orders;//    }////    public ResponseEntity<?> setOrderStatus (OrderStatusDTO dto){//        OrderUserStatus orderUserStatus = orderUserStatusMapper.toEntity(dto);//        Optional<Order> orderOptional = ordersRepo.findById(dto.getOrderNumber());//        if (orderOptional.isPresent()) {//                        IntegrationOrderStatusDTO statusHistoryDTO = new IntegrationOrderStatusDTO(//                    Integer.valueOf(dto.getUserID()),//                    OrderStatus.valueOf(dto.getStatus()),//                    orderOptional.get().getMb_number(),//                    dto.getComment()//            );////            integrationRestController.setOrderUserStatus(statusHistoryDTO);//            orderUserStatusRepo.save(orderUserStatus);//            return ResponseEntity.ok().build();//        }//        else return ResponseEntity.notFound().build();//    }}