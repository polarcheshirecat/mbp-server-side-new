package ru.spb.devpractices.masterbest.serverside.config;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.util.matcher.AntPathRequestMatcher;import org.springframework.web.servlet.config.annotation.CorsRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;@Configuration@EnableWebSecuritypublic class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {    private final UserDetailsService userDetailsService;    public WebSecurityConfigurer(@Qualifier("userDetailsServiceImpl") UserDetailsService userDetailsService) {        this.userDetailsService = userDetailsService;    }    @Bean    public PasswordEncoder passwordEncoder(){        return new BCryptPasswordEncoder();    }    @Bean    public WebMvcConfigurer corsConfigurer(){        return new WebMvcConfigurer() {            @Override            public void addCorsMappings(CorsRegistry registry) {                registry.addMapping("/**").allowedOrigins("*");            }        };    }    @Override    protected void configure(HttpSecurity http) throws Exception {     http.cors()             .and()             .authorizeRequests()                .antMatchers("/auth/**", "/error",                        "/test/**").permitAll()             .anyRequest().fullyAuthenticated()             .and().httpBasic()             .and()             .sessionManagement()                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED).and()             .csrf().disable();}    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());    }}