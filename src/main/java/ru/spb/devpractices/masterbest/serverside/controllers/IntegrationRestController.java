package ru.spb.devpractices.masterbest.serverside.controllers;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.web.client.RestTemplateBuilder;import org.springframework.context.annotation.Bean;import org.springframework.core.ParameterizedTypeReference;import org.springframework.http.*;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestOperations;import org.springframework.web.client.RestTemplate;import org.springframework.web.util.UriComponentsBuilder;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationOrderDTO;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationOrderStatusDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.OrderNotFoundException;import ru.spb.devpractices.masterbest.serverside.model.order.OrderStatus;import ru.spb.devpractices.masterbest.serverside.properties.GlobalProperties;import java.util.List;import java.util.Objects;@RestController@Slf4jpublic class IntegrationRestController {    private final GlobalProperties properties;    private final RestTemplate restTemplate;    public IntegrationRestController(GlobalProperties properties, RestTemplate restTemplate) {        this.properties = properties;        this.restTemplate = restTemplate;    }    @Bean    RestOperations restTemplateBuilder(RestTemplateBuilder restTemplateBuilder) {        return restTemplateBuilder.basicAuthentication(properties.getLogin(), properties.getPassword()).build();    }    //пихать сюда    //GET: http://10.10.10.1/UT_test/hs/Obmen/Orders/GetOrders?guid=123e4567e89b12d3a456426655440000    public List<IntegrationOrderDTO> getOrdersByGUID(String guid) throws  Exception {        String requestURL = properties.getServer1CPath() + properties.getGetOrderURL();        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(requestURL)                .queryParam("guid", guid);        ResponseEntity<List<IntegrationOrderDTO>> response = restTemplate                .exchange(builder.toUriString(), HttpMethod.GET, getAuthEntity(),                        new ParameterizedTypeReference<List<IntegrationOrderDTO>>(){});        if (response.getBody().stream().anyMatch(Objects::isNull)){            throw new OrderNotFoundException();        }        return response.getBody();    }    //пихать сюда    //http://10.10.10.1/UT_test/hs/Obmen/Orders/GetOrders?UserID=000000085&Status=New    public List<IntegrationOrderDTO> getOrdersByUserIdAndOrderStatus (List<String> userIDs, OrderStatus status){        String requestURL = properties.getServer1CPath() + properties.getGetOrderURL();        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(requestURL)                .queryParam("UserID", userIDs)                .queryParam("Status", status.name());        ResponseEntity<List<IntegrationOrderDTO>> response = restTemplate                .exchange(builder.toUriString(), HttpMethod.GET, getAuthEntity(),                        new ParameterizedTypeReference<List<IntegrationOrderDTO>>(){});        return response.getBody();    }    //пихать сюда    //http://10.10.10.1/UT_test/hs/Obmen/Orders/SetStatus    public ResponseEntity<IntegrationOrderStatusDTO> setOrderUserStatus (IntegrationOrderStatusDTO dto){        String requestURL = properties.getServer1CPath() + properties.getSetOrderStatusUrl();        HttpHeaders headers = new HttpHeaders();        headers.setBasicAuth(properties.getLogin(), properties.getPassword());        headers.setContentType(MediaType.APPLICATION_JSON);        HttpEntity<IntegrationOrderStatusDTO> request = new HttpEntity<>(dto, headers);        log.info(request.toString());        System.out.println(request.toString());        ResponseEntity<IntegrationOrderStatusDTO> response =  restTemplate                .exchange(requestURL, HttpMethod.POST, request, IntegrationOrderStatusDTO.class);        log.info(response.toString());        return response;    }//    //пихать сюда//    //http://10.10.10.1/UT_test/hs/Obmen/Collectors/SetStatus//    public boolean setUserStatus (IntegrationUserStatusDataDTO dto){//        String requestURL = properties.getServer1CPath() + properties.getSetUserStatusUrl();//        HttpEntity<IntegrationUserStatusDataDTO> request = new HttpEntity<>(dto);//        request.getHeaders().setBasicAuth(properties.getLogin(), properties.getPassword());//        ResponseEntity<IntegrationUserStatusDataDTO> response =  restTemplate//                .exchange(requestURL, HttpMethod.POST, request, IntegrationUserStatusDataDTO.class);//        return response.getStatusCode() == HttpStatus.OK ? true : false;//    }    private HttpEntity getAuthEntity() {        HttpHeaders headers = new HttpHeaders();        headers.setBasicAuth(properties.getLogin(), properties.getPassword());        return new HttpEntity(headers);    }}