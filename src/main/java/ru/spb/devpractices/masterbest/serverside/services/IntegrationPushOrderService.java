package ru.spb.devpractices.masterbest.serverside.services;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import ru.spb.devpractices.masterbest.serverside.controllers.IntegrationRestController;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationOrderDTO;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationPushDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.UserNotFoundException;import ru.spb.devpractices.masterbest.serverside.mappers.IntegrationOrderMapper;import ru.spb.devpractices.masterbest.serverside.mappers.IntegrationPushOrderMapper;import ru.spb.devpractices.masterbest.serverside.model.User;import ru.spb.devpractices.masterbest.serverside.model.order.Order;import ru.spb.devpractices.masterbest.serverside.model.order.OrderStatus;import ru.spb.devpractices.masterbest.serverside.model.order.OrderUserStatus;import ru.spb.devpractices.masterbest.serverside.model.order.PushOrderInfo;import ru.spb.devpractices.masterbest.serverside.services.model.OrderUserStatusService;import ru.spb.devpractices.masterbest.serverside.services.model.OrdersService;import ru.spb.devpractices.masterbest.serverside.services.model.PushOrdersService;import ru.spb.devpractices.masterbest.serverside.services.model.UserService;import java.util.List;import java.util.stream.Collectors;@Slf4j@Servicepublic class IntegrationPushOrderService {    private final UserService userService;    private final OrdersService ordersService;    private final IntegrationPushOrderMapper pushMapper;    private final PushOrdersService pushOrdersService;    private final IntegrationRestController integrationRestController;    private final IntegrationOrderMapper orderMapper;    private final OrderUserStatusService orderUserStatusService;    public IntegrationPushOrderService(UserService userService, OrdersService ordersService,                                       IntegrationPushOrderMapper pushMapper,                                       PushOrdersService pushOrdersService,                                       IntegrationRestController integrationRestController,                                       IntegrationOrderMapper orderMapper,                                       OrderUserStatusService orderUserStatusService) {        this.userService = userService;        this.ordersService = ordersService;        this.pushMapper = pushMapper;        this.pushOrdersService = pushOrdersService;        this.integrationRestController = integrationRestController;        this.orderMapper = orderMapper;        this.orderUserStatusService = orderUserStatusService;    }    public ResponseEntity<?> proceedPush (IntegrationPushDTO pushDTO){        if (pushDTO == null || pushDTO.getOrders() == null || pushDTO.getUserId() == null){            log.info("pushDTO is null");            return ResponseEntity.badRequest().build();        }        ResponseEntity<?> result = null;        //check if push is cancelled push        if (pushDTO.getCancel()){            log.info("Отмена назначения заказа ");            //TODO удалить этот заказ у этого пользователя и отправить пользовтелю пуш            return new ResponseEntity<>(pushDTO, HttpStatus.OK);        }        //check if user exists        User userFromDB = null;        try {            log.info("Проверяю существует ли в базе пользователь  " + pushDTO.getUserId());            userFromDB = userService.getUserById(Long.valueOf(pushDTO.getUserId()));            log.info("Найден пользователь " + userFromDB.getName());        } catch (UserNotFoundException ex ){            pushDTO.setMessage(ex.getMessage());            result = new ResponseEntity<>(pushDTO, HttpStatus.NOT_FOUND);            log.info("Пользователь не найден. Отправлен request -> " + result.getBody().toString());            return result;        }        //такой пользователь есть, можно сохранить пуш        PushOrderInfo pushOrderInfo = pushMapper.toEntity(pushDTO);        pushOrdersService.save(pushOrderInfo);        //и получить по нему заказы сразу        List<IntegrationOrderDTO> ordersDTO = null;        try {            ordersDTO = integrationRestController.getOrdersByGUID(pushDTO.getGuid());        } catch (Exception e){            log.error("Ошибка при попытке получить заказы из 1С по guid " + pushDTO.getGuid(),e);            pushDTO.setMessage("Ошибка при попытке получить заказы из 1С по guid " + pushDTO.getGuid());            return new ResponseEntity<>(pushDTO, HttpStatus.NO_CONTENT);        }        List<Order> orders = ordersDTO.stream().map(orderDTO -> orderMapper.toEntity(orderDTO))                .collect(Collectors.toList());        orders.stream().forEach(order -> order.setGuid(pushDTO.getGuid()));        //Сохарнить все заказы в бд        orders.stream().forEach(order -> ordersService.saveOrder(order));        OrderUserStatus orderUserStatus = new OrderUserStatus();        orderUserStatus.setUserId(Long.valueOf(pushDTO.getUserId()));        orderUserStatus.setGuid(pushDTO.getGuid());        orderUserStatus.setStatus(OrderStatus.New);        orderUserStatus.setComment(pushDTO.getComment());        orderUserStatusService.save(orderUserStatus);        //forming answer        pushDTO.setMessage(HttpStatus.OK.getReasonPhrase());        result = new ResponseEntity<>(pushDTO, HttpStatus.OK);        return result;    }}