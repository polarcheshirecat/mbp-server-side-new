package ru.spb.devpractices.masterbest.serverside.services;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import ru.spb.devpractices.masterbest.serverside.controllers.IntegrationRestController;import ru.spb.devpractices.masterbest.serverside.dto.IntegrationOrderDTO;import ru.spb.devpractices.masterbest.serverside.dto.IntegrationPushOrderDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.UserNotFoundException;import ru.spb.devpractices.masterbest.serverside.mappers.IntegrationOrderMapper;import ru.spb.devpractices.masterbest.serverside.mappers.IntegrationPushOrderMapper;import ru.spb.devpractices.masterbest.serverside.model.User;import ru.spb.devpractices.masterbest.serverside.model.order.Order;import ru.spb.devpractices.masterbest.serverside.model.order.OrderStatus;import ru.spb.devpractices.masterbest.serverside.model.order.OrderUserStatus;import ru.spb.devpractices.masterbest.serverside.model.order.PushOrderInfo;import ru.spb.devpractices.masterbest.serverside.services.model.OrderUserStatusService;import ru.spb.devpractices.masterbest.serverside.services.model.OrdersService;import ru.spb.devpractices.masterbest.serverside.services.model.PushOrdersService;import ru.spb.devpractices.masterbest.serverside.services.model.UserService;import java.util.HashSet;import java.util.Set;@Slf4j@Servicepublic class IntegrationPushOrderService {    private final UserService userService;    private final OrdersService ordersService;    private final IntegrationPushOrderMapper pushMapper;    private final PushOrdersService pushOrdersService;    private final IntegrationRestController integrationRestController;    private final IntegrationOrderMapper orderMapper;    private final OrderUserStatusService orderUserStatusService;    public IntegrationPushOrderService(UserService userService, OrdersService ordersService,                                       IntegrationPushOrderMapper pushMapper,                                       PushOrdersService pushOrdersService,                                       IntegrationRestController integrationRestController,                                       IntegrationOrderMapper orderMapper,                                       OrderUserStatusService orderUserStatusService) {        this.userService = userService;        this.ordersService = ordersService;        this.pushMapper = pushMapper;        this.pushOrdersService = pushOrdersService;        this.integrationRestController = integrationRestController;        this.orderMapper = orderMapper;        this.orderUserStatusService = orderUserStatusService;    }    public ResponseEntity<?> proceedPush (IntegrationPushOrderDTO pushDTO){        if (pushDTO == null ){            log.info("pushDTO is null");            return ResponseEntity.badRequest().build();        }        String logHeader = "proceedPush № " + pushDTO.getOrderNumber() + " ";        ResponseEntity<?> result = null;        //check if push is cancelled push        if (pushDTO.getCancel()){            log.info(logHeader + "Отмена назначения заказа ");            //TODO удалить этот заказ у этого пользователя и отправить пользовтелю пуш            return new ResponseEntity<>(pushDTO, HttpStatus.OK);        }        //check if user exists        User userFromDB = null;        try {            log.info(logHeader + "Проверяю существует ли в базе пользователь  " + pushDTO.getUserID());            userFromDB = userService.getUserById(Long.valueOf(pushDTO.getUserID()));            log.info(logHeader + "Найден пользователь " + userFromDB.toString());        } catch (UserNotFoundException ex ){            pushDTO.setMessage(ex.getMessage());            result = new ResponseEntity<>(pushDTO, HttpStatus.NOT_FOUND);            log.info(logHeader + "Пользователь не найден. Отправлен request -> " + result.getBody().toString());            return result;        }        //такой пользователь есть, можно сохранить пуш        PushOrderInfo pushOrderInfo = pushMapper.toEntity(pushDTO);        pushOrdersService.save(pushOrderInfo);        //и получить по нему заказ сразу        IntegrationOrderDTO orderDTO = null;        try {            orderDTO = integrationRestController.getOrderByNumber(pushDTO.getOrderNumber());        } catch (Exception e){            log.error("Ошибка при попытке получить из 1С заказ " + pushDTO.getOrderNumber(),e);            return ResponseEntity.noContent().build();        }        Order order = orderMapper.toEntity(orderDTO);        Set<User> users = new HashSet<>();        users.add(userFromDB);        order.setUsers(users);        ordersService.saveOrder(order);        OrderUserStatus orderUserStatus = new OrderUserStatus();        orderUserStatus.setUser(userFromDB.getId());        orderUserStatus.setOrder(order.getIkea_number());        orderUserStatus.setStatus(OrderStatus.New);        orderUserStatusService.save(orderUserStatus);        //forming answer        pushDTO.setMessage(HttpStatus.OK.getReasonPhrase());        result = new ResponseEntity<>(pushDTO, HttpStatus.OK);        return result;    }}