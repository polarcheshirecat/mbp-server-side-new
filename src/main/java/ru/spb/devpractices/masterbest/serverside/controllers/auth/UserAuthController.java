package ru.spb.devpractices.masterbest.serverside.controllers.auth;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import ru.spb.devpractices.masterbest.serverside.dto.front.UserAuthDTO;import ru.spb.devpractices.masterbest.serverside.dto.front.UserDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.UserNotFoundException;import ru.spb.devpractices.masterbest.serverside.mappers.UserMapper;import ru.spb.devpractices.masterbest.serverside.model.User;import ru.spb.devpractices.masterbest.serverside.services.model.UserService;import java.security.Principal;@Slf4j@RestController@RequestMapping ("/auth")public class UserAuthController {    private final UserService userService;    private final UserMapper userMapper;    public UserAuthController(UserService userService, UserMapper userMapper) {        this.userService = userService;        this.userMapper = userMapper;    }    @CrossOrigin    @GetMapping ("/login")    public ResponseEntity<?> auth(Principal principal){        if(principal==null || principal.getName()==null){            log.info("Principal or principal fields is null", principal);            return ResponseEntity.badRequest().build();        }        User user = userService.getUserByUsername(principal.getName());        UserDTO userDTO = userMapper.toDto(user);        ResponseEntity<UserDTO> response = new ResponseEntity<>(userDTO, HttpStatus.OK);        log.info ("Sending response ->" + response.toString());        return response;    }    @CrossOrigin    @RequestMapping(value = "/registration",            method = RequestMethod.POST,            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE,            produces = {MediaType.APPLICATION_ATOM_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})    public ResponseEntity<?> register(UserAuthDTO dto){        if (dto == null || dto.getUsername() == null || dto.getPassword() == null){            log.info("UserDTO or userDTO fields is null" + dto);            return ResponseEntity.badRequest().build();        }        User user = null;        try {        user = userService.getUserByUsername(dto.getUsername());        } catch (UserNotFoundException ex){            log.info("User with username " + dto.getUsername() + " not found in data base");            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);        }        user.setPassword(dto.getPassword());        log.info("Saving user with username = " + user.getUsername()+"...");        userService.save(user);        log.info("User with username "+ user.getUsername()+" saved in DB");        return new ResponseEntity<>(HttpStatus.CREATED);    }}