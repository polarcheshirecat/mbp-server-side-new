package ru.spb.devpractices.masterbest.serverside.controllers;import com.fasterxml.jackson.databind.util.JSONPObject;import lombok.extern.slf4j.Slf4j;import org.apache.tomcat.util.json.JSONParser;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import ru.spb.devpractices.masterbest.serverside.dto.IntegrationOrderInfoDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.UserNotFoundException;import ru.spb.devpractices.masterbest.serverside.model.User;import ru.spb.devpractices.masterbest.serverside.services.UserService;@RestController@RequestMapping("/integration")@Slf4jpublic class IntegrationController {    @Autowired    private UserService userService;    /**     * Вызывается при отправке заказа из 1С     * Варианты обработки:     * 1. Если в JSONе "Cancel": "true"  - то это отмена назначения заказа (то есть оператор     * ошибочно отправил этот заказ этогому сборщику и сам решает его отменить     * 2. "Cancel": "false" - это новый заказ для сборщика. Сборщик получает пуш в мобильном приложении.     * Заказ запиывается в базу со статусом "Новый"     * @param orderInfoDTO легковесная форма заказа для обмена     * @return     */    @RequestMapping(value = "/pushOrder",            method = RequestMethod.POST,            produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<?> pushOrder(@RequestBody IntegrationOrderInfoDTO orderInfoDTO){        //TODO Логирование        if (orderInfoDTO == null)            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        if(orderInfoDTO!=null && orderInfoDTO.getCancel()){                //Сюда отмену заказа у пользователя/удаление из базы        }        String userID = orderInfoDTO.getUserID();        User userFromDB = null;        try {            userFromDB = userService.getUserById(Long.valueOf(userID));        } catch (UserNotFoundException ex ){            orderInfoDTO.setMessage(ex.getMessage());            return new ResponseEntity<>(orderInfoDTO, HttpStatus.NOT_FOUND);        }        //TODO пуш пользователю        //Пользователь открывает заказ, я дергаю 1С, чтобы получить полный заказ        orderInfoDTO.setMessage("Ok");        return new ResponseEntity<>(orderInfoDTO, HttpStatus.OK);    }}