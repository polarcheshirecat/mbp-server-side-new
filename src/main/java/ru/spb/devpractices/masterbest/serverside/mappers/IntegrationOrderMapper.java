package ru.spb.devpractices.masterbest.serverside.mappers;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationOrderDTO;import ru.spb.devpractices.masterbest.serverside.dto.integration.IntegrationOrderTypeDTO;import ru.spb.devpractices.masterbest.serverside.exceptions.UserNotFoundException;import ru.spb.devpractices.masterbest.serverside.model.User;import ru.spb.devpractices.masterbest.serverside.model.order.Order;import ru.spb.devpractices.masterbest.serverside.model.order.OrderItem;import ru.spb.devpractices.masterbest.serverside.model.order.OrderType;import ru.spb.devpractices.masterbest.serverside.repo.OrderTypesRepo;import ru.spb.devpractices.masterbest.serverside.services.model.UserService;import java.math.BigDecimal;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Set;import java.util.stream.Collectors;@Slf4j@Componentpublic class IntegrationOrderMapper {    @Autowired    private OrderTypesRepo typesRepo;    @Autowired    private IntegrationOrderItemMapper integrationOrderItemMapper;    @Autowired    private UserService userService;    public Order toEntity (IntegrationOrderDTO dto){        if (dto == null ) {            return null;        }        Order order = new Order();        order.setNumberIkea(dto.getNumberIkea());        order.setNumberMB(dto.getNumberMB());        order.setDateStart(dto.getDateStart());        order.setDateEnd(dto.getDateEnd());        IntegrationOrderTypeDTO orderTypeDTO = dto.getOrderTypeDTO();        if (orderTypeDTO!=null){            OrderType orderType = new OrderType();            orderType.setId(orderTypeDTO.getId());            orderType.setName(orderTypeDTO.getName());            order.setOrderType(orderType);        }        order.setClient(dto.getClient());        order.setAddress(dto.getAddress());        order.setPhone(dto.getTelefon());        order.setRange(new BigDecimal(dto.getSumRangeBuh()));        order.setCommentFromOperator(dto.getCommentFromOperator());        order.setCommentFromUser(dto.getCommentFromUser());        //orderItems парсим через mapstruct        if (dto.getGoods()!=null && !dto.getGoods().isEmpty()) {            Set<OrderItem> orderItems = dto.getGoods().stream()                    .map(orderItemDTO -> integrationOrderItemMapper.toEntity(orderItemDTO))                    .collect(Collectors.toSet());            //установим флаги isFrame на артикулах            if (dto.getFrames() != null && !dto.getFrames().isEmpty()) {                List<String> frames = dto.getFrames()                        .stream()                        .map(frame -> frame.getArticle())                        .collect(Collectors.toList());                orderItems.stream().forEach(orderItem -> {                    if (frames.contains(orderItem.getArticle())) {                        orderItem.setIsFrame(true);                    }                });            }            order.setOrderItems(orderItems);        }        if (dto.getUsers()!=null && !dto.getUsers().isEmpty()){            Set<User> users = new HashSet();            try {                users = dto.getUsers().stream().map(userDTO -> userService.getUserById(Long.valueOf(userDTO.getUserId())))                        .collect(Collectors.toSet());            } catch (UserNotFoundException ex){                log.info("Один из пользователей, указанный в заказе, не найден в базе данных приложения");            }            order.setUsers(users);        }        return order;    }    private Timestamp dateParser (String date1c) throws Exception {        String[] splited = date1c.split("T");        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");        Date parsedDate = dateFormat.parse(splited[0] + " " + splited[1]);        return new java.sql.Timestamp(parsedDate.getTime());    }}